import winston from "winston"; // Импортируем библиотеку winston для логирования

// Создание логгера
export const logger = winston.createLogger({
	level: "info", // Устанавливаем минимальный уровень логирования (info). Логи с более низким уровнем не будут записаны.
	transports: [
		// Настройка транспорта для вывода логов в консоль
		new winston.transports.Console({
			format: winston.format.simple(), // Формат логов для консоли: простое текстовое сообщение
		}),
		// Настройка транспорта для записи логов в файл
		new winston.transports.File({
			filename: "error.log", // Имя файла для логов ошибок
			level: "error", // Этот транспорт записывает только ошибки и более высокие уровни
		}),
	],
});

/*

Объяснение работы кода:

    Импорт winston:
        winston — это популярная библиотека для логирования в Node.js. Она поддерживает несколько уровней логирования, множество транспортов (консоль, файлы, внешние сервисы) и позволяет легко настроить вывод логов.

    Создание логгера с createLogger:
        winston.createLogger() создает новый экземпляр логгера с настройками, которые передаются в объекте.
        В объекте настраиваем level и transports.

    Уровень логирования (level):
        Уровень логирования определяет, какие сообщения будут записываться. Чем ниже уровень, тем больше сообщений будет записано.
        Уровень info означает, что будут записываться сообщения с уровня info, warn, и error. Сообщения с уровня debug не будут записаны, так как они имеют более низкий уровень.

    Транспорты (transports):
        Консоль: new winston.transports.Console() настраивает транспорт, который выводит логи в консоль.
            Формат логов установлен как simple(), что означает вывод простого текста, например: info: Пример сообщения.
        Файл: new winston.transports.File() настраивает транспорт для записи логов в файл.
            Логи с уровнем error и выше (то есть только ошибки и критические ошибки) будут записываться в файл error.log.

    Пример использования:
        Логи могут быть записаны следующим образом:

        logger.info("Информационное сообщение");
        logger.warn("Предупреждение");
        logger.error("Ошибка");

    Преимущества:
        Логирование в файл полезно для хранения логов об ошибках в приложении, чтобы можно было отслеживать их и анализировать после сбоев.
        Логирование в консоль удобно для разработки, так как позволяет видеть вывод непосредственно в терминале или командной строке.

Таким образом, этот код создает гибкую систему логирования, которая записывает логи как в консоль, так и в файл, с фильтрацией по уровню логирования.

*/
