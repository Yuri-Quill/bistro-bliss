import xss from "xss"; // Импортируем библиотеку xss для защиты от атак XSS (Cross-Site Scripting)

// Middleware для санитизации входных данных
export const sanitizeInput = (req, res, next) => {
	// Проверяем, есть ли данные в теле запроса (req.body)
	if (req.body) {
		req.body = sanitizeObject(req.body); // Очистка всех строк в теле запроса
	}

	// Проверяем, есть ли данные в query параметрах (req.query)
	if (req.query) {
		req.query = sanitizeObject(req.query); // Очистка всех строк в query параметрах
	}

	// Проверяем, есть ли данные в параметрах URL (req.params)
	if (req.params) {
		req.params = sanitizeObject(req.params); // Очистка всех строк в параметрах URL
	}

	next(); // Переход к следующему middleware или маршруту
};

// Вспомогательная функция для санитизации объектов (очищает строки от XSS)
const sanitizeObject = (obj) => {
	const sanitizedObj = {}; // Создаем новый объект для хранения очищенных данных
	Object.keys(obj).forEach((key) => {
		// Для каждого ключа проверяем, является ли значение строкой
		sanitizedObj[key] = typeof obj[key] === "string" ? xss(obj[key]) : obj[key];
		// Если это строка, очищаем ее с помощью xss. Если это не строка, оставляем как есть
	});
	return sanitizedObj; // Возвращаем очищенный объект
};

/*

Объяснение работы кода:

    Импорт xss:
        Библиотека xss используется для предотвращения атак типа XSS (Cross-Site Scripting), которые могут произойти, если пользователи вставляют вредоносный JavaScript код в поля ввода. Библиотека очищает эти данные, удаляя вредоносный код.

    Middleware sanitizeInput:
        Этот middleware проверяет три ключевых части запроса: req.body, req.query, и req.params (то есть тело запроса, параметры URL и query параметры). Если они существуют, для каждого из этих объектов вызывается функция sanitizeObject, которая очищает все строки от потенциальных угроз XSS.
        После очистки данных, middleware передает управление следующему этапу в цепочке с помощью next().

    Функция sanitizeObject:
        Функция проходит по всем ключам объекта (в данном случае, по данным в req.body, req.query, и req.params).
        Для каждого ключа проверяется, является ли его значение строкой. Если это строка, она передается в функцию xss(), которая очищает ее от всех опасных символов или скриптов.
        Если значение не строка, оно остается неизменным.

    Применение:
        Этот middleware может быть использован на всех маршрутах Express для очистки входящих данных, предотвращая возможность внедрения вредоносных скриптов через поля ввода (например, формы).

Таким образом, этот код помогает защитить приложение от XSS атак, обеспечивая, что все входящие данные, которые могут быть использованы на клиентской стороне (например, в HTML или JavaScript), будут безопасными.

*/
